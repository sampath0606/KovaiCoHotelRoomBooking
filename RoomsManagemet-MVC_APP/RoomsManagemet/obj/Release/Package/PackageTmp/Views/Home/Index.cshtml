@model OfferManagement.Models.DiscountTransaction
@using OfferManagement.Models;

@{
    ViewBag.Title = System.Configuration.ConfigurationManager.AppSettings["TransactionsPageName"];
}
<div class="text-center"><h2>@ViewBag.Title</h2></div>

<script>
    const FULL_DASH_ARRAY = 283;
    const WARNING_THRESHOLD = 10;
    const ALERT_THRESHOLD = 5;

    const COLOR_CODES = {
        info: {
            color: "green"
        },
        warning: {
            color: "orange",
            threshold: WARNING_THRESHOLD
        },
        alert: {
            color: "red",
            threshold: ALERT_THRESHOLD
        }
    };

    let TIME_LIMIT = 30;
    let timePassed = 0;
    let timeLeft = TIME_LIMIT;
    let timerInterval = null;
    let remainingPathColor = COLOR_CODES.info.color;



    $(document).ready(function () {

        hideresend();

        $('#discount').change(function () {
            $('#BilledValue').val($('#BillValue').val() - $('#discount').val());
        });

        $(document).on("click", "#btnResendOTP", function (e) {
            $.ajax({
                url: "/Home/ResendOTP",
                type: "GET",
                success: function (result) {
                    startTimer();
                    hideresend();
                }
            })
        });

        //$(document).on("click", "#btnsavensendOTP", function (e){
        //    startTimer();
        //});

        //$(document).on("click", "#btnValidateOTP", function (e) {
           
        //});

        if (!document.getElementById("btnValidateOTP").disabled) {
            startTimer();
        }

    });



    function formatTimeLeft(time) {
        // The largest round integer less than or equal to the result of time divided being by 60.
        const minutes = Math.floor(time / 60);

        // Seconds are the remainder of the time divided by 60 (modulus operator)
        let seconds = time % 60;

        // If the value of seconds is less than 10, then display seconds with a leading zero
        if (seconds < 10) {
            seconds = `0${seconds}`;
        }

        // The output in MM:SS format
        return `${minutes}:${seconds}`;
    }

    function formatTime(time) {
        const minutes = Math.floor(time / 60);
        let seconds = time % 60;

        if (seconds < 10) {
            seconds = `0${seconds}`;
        }

        return `${seconds}`;
    }

    function onTimesUp() {
        clearInterval(timerInterval);
        showResend();
    }

    function showResend() {
        //document.getElementById('btnResendOTP').removeAttribute('disabled');
        document.getElementById('btnResendOTP').style.visibility = "visible";
    }

    function hideresend() {
        //$("#btnResendOTP").attr("disabled", true);

        //$("#btnResendOTP").attr("disabled", true);

        document.getElementById("btnResendOTP").style.visibility = "hidden";
    }


    function startTimer() {
        TIME_LIMIT = 30;
        timePassed = 0;

        timerInterval = setInterval(() => {
            timePassed = timePassed += 1;
            timeLeft = TIME_LIMIT - timePassed;
            document.getElementById("base-timer-label").innerHTML = formatTime(
                timeLeft
            );
            setCircleDasharray();
            setRemainingPathColor(timeLeft);

            if (timeLeft === 0) {
                onTimesUp();
            }
        }, 1000);
    }

    function setRemainingPathColor(timeLeft) {
        const { alert, warning, info } = COLOR_CODES;
        if (timeLeft <= alert.threshold) {
            document
                .getElementById("base-timer-path-remaining")
                .classList.remove(warning.color);
            document
                .getElementById("base-timer-path-remaining")
                .classList.add(alert.color);
        } else if (timeLeft <= warning.threshold) {
            document
                .getElementById("base-timer-path-remaining")
                .classList.remove(info.color);
            document
                .getElementById("base-timer-path-remaining")
                .classList.add(warning.color);
        }
    }

    function calculateTimeFraction() {
        const rawTimeFraction = timeLeft / TIME_LIMIT;
        return rawTimeFraction - (1 / TIME_LIMIT) * (1 - rawTimeFraction);
    }

    function setCircleDasharray() {
        const circleDasharray = `${(
            calculateTimeFraction() * FULL_DASH_ARRAY
        ).toFixed(0)} 283`;
        document
            .getElementById("base-timer-path-remaining")
            .setAttribute("stroke-dasharray", circleDasharray);
    }




</script>

<style>
    .base-timer {
        position: relative;
        width: 80px;
        height: 30px;
        color: green;
    }

    .base-timer__svg {
        transform: scaleX(-1);
    }

    .base-timer__circle {
        fill: none;
        stroke: none;
    }

    .base-timer__path-elapsed {
        stroke-width: 7px;
        stroke: aliceblue;
    }

    .base-timer__path-remaining {
        stroke-width: 7px;
        stroke-linecap: round;
        transform: rotate(90deg);
        transform-origin: center;
        transition: 1s linear all;
        fill-rule: nonzero;
        stroke: currentColor;
        position: relative;
    }

        .base-timer__path-remaining.green {
            color: rgb(65, 184, 131);
        }

        .base-timer__path-remaining.orange {
            color: orange;
        }

        .base-timer__path-remaining.red {
            color: red;
        }

    .base-timer__label {
        position: relative;
        width: 30px;
        height: 30px;
        top: -45px;
        right: -10px;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 20px;
    }
</style>

@using (Html.BeginForm("Index", "Home", FormMethod.Post, new { @id = "discountform" }))
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

        <div>
            <h4 class="text-info text-center"><b> @ViewBag.Message</b></h4>
        </div>

        <br />

        <div class="form-group">
            @Html.LabelFor(model => model.CustomerName, htmlAttributes: new { @class = "control-label col-md-6" })
            <div class="col-md-6">
                @Html.EditorFor(model => model.CustomerName, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.CustomerName, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.CustomerEmail, htmlAttributes: new { @class = "control-label col-md-6" })
            <div class="col-md-6">
                @Html.EditorFor(model => model.CustomerEmail, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.CustomerEmail, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.MobileNumber, htmlAttributes: new { @class = "control-label col-md-6" })
            <div class="col-md-6">
                @Html.EditorFor(model => model.MobileNumber, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.MobileNumber, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.PCCName, htmlAttributes: new { @class = "control-label col-md-6" })
            <div class="col-md-6">
                @Html.DropDownListFor(model => model.PCCName, (IEnumerable<SelectListItem>)ViewData["PCCNames"], "Select a PCC Name", htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.PCCName, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.BillNo, htmlAttributes: new { @class = "control-label col-md-6" })
            <div class="col-md-6">
                @Html.EditorFor(model => model.BillNo, new { htmlAttributes = new { @class = "form-control", @id = "BillNo" } })
                @Html.ValidationMessageFor(model => model.BillNo, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.BillValue, htmlAttributes: new { @class = "control-label col-md-6" })
            <div class="col-md-6">
                @Html.EditorFor(model => model.BillValue, new { htmlAttributes = new { @class = "form-control", @id = "BillValue" } })
                @Html.ValidationMessageFor(model => model.BillValue, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Discount, htmlAttributes: new { @class = "control-label col-md-6" })
            <div class="col-md-6">
                @Html.EditorFor(model => model.Discount, new { htmlAttributes = new { @class = "form-control", @id = "discount" } })
                @Html.ValidationMessageFor(model => model.Discount, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.BilledValue, htmlAttributes: new { @class = "control-label col-md-6" })
            <div class="col-md-6">
                @Html.EditorFor(model => model.BilledValue, new { htmlAttributes = new { @class = "form-control", @disabled = "disabled", @id = "BilledValue" } })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.DiscountReason, htmlAttributes: new { @class = "control-label col-md-6" })
            <div class="col-md-6">
                @Html.DropDownListFor(model => model.DiscountReason, (IEnumerable<SelectListItem>)ViewData["DiscountReasons"], "Select a Reason", htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.DiscountReason, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.MessageTemplate, htmlAttributes: new { @class = "control-label col-md-6" })
            <div class="col-md-6">
                @Html.DropDownListFor(model => model.MessageTemplate,
               ((IEnumerable<SelectListItem>)ViewData["SMSTemplates"]), "Select a Template",
               htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.MessageTemplate, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-6 col-md-6">
                <input type="submit" id="btnsavensendOTP" disabled="@(Model.enableSubmitbtn == false)" value="Save & Send OTP" class="btn btn-primary" />
            </div>
        </div>


        <div class="form-group">
            @Html.LabelFor(model => model.OTP, htmlAttributes: new { @class = "control-label col-md-6" })
            <div class="col-md-6">
                <input type="text" id="txtOtp" disabled="@(Model.enableSubmitbtn == true)" min="4" name="OTPfield" maxlength="4" placeholder="Please Enter OTP" class="form-control" />
                @*@Html.EditorFor(model => model.OTP, new { htmlAttributes = new { @class = "form-control" } })*@
                @*@Html.ValidationMessageFor(model => model.OTP, "", new { @class = "text-danger" })*@
            </div>

        </div>

        <div class="form-group">
            <div class="col-md-offset-6 col-md-2">
                <input type="button" disabled="@(Model.enableValidatebtn == false)" value="Validate OTP" id="btnValidateOTP" class="btn btn-success"
                       onclick="location.href='@Url.Action("ValidateOTP","Home")?otp=' + $('#txtOtp').val()" />
            </div>

            <div class="col-md-2 base-timer">
                <svg class="base-timer__svg" viewBox="0 0 100 100" xmlns="http://www.w3.org/2000/svg">
                    <g class="base-timer__circle">
                        <circle class="base-timer__path-elapsed" cx="50" cy="50" r="45"></circle>
                        <path id="base-timer-path-remaining"
                              @*stroke-dasharray="283"*@
                              class="base-timer__path-remaining ${remainingPathColor}"
                              d="M 50, 50 m -45, 0 a 45,45 0 1,0 90,0 a 45,45 0 1,0 -90,0 "></path>
                    </g>
                </svg>
                <span id="base-timer-label" class="base-timer__label">
                    30
                </span>
            </div>

        </div>

        <div class="form-group">

            <div class="col-md-offset-6 col-md-2">
                <input type="button" value="Resend OTP" hidden="@(Model.enableValidatebtn == false)" disabled="@(Model.enableValidatebtn == false)" id="btnResendOTP" class="btn btn-success" />
            </div>

            
        </div>
        @*<br />*@
        @*<div class="form-group">
            <div class="col-md-offset-6 col-md-6 text-info">
                Note : Resend will be disabled for 30 Seconds once triggered.
            </div>
        </div>*@

    </div>


}
